//介绍：百宝云_注册码系统_应用模本_命令库
//作者：百宝云工程师04
//1.0更新日期：2016年12月30日 16:52:28
//1.1更新日期：2017年1月11日 10:19:47
//1.2更新日期：2017年1月17日 19:45:16
//1.3更新日期：2017年1月20日 18:43:24
//1.4更新日期：2017年1月24日 16:45:37
//1.5更新日期：2017年2月4日 11:41:56
//更新
//1、把心跳检查相关代码并入命令库，主脚本以子线程启动一个Sub，由Sub再调用的形式来执行。
//2、增加 函数_发送监控消息(规则名称, 详情)。
//1.6更新日期：2017年2月13日 10:49:01
//更新
//1、优化注册码位数识别，增加识别商品销售的前缀信息。
//1.7更新日期：2017年2月22日 15:50:48
//1、修正心跳线程中，剩余时间无法传递回主线的问题，改共享变量方式传递。
//1.8更新日期：2017年3月17日 11:08:06
//1、更新心跳通讯失败，传回错误原因描述。
//1.9更新日期：2017年5月18日 10:49:20
//1、更新MySQL版解绑返回判定，成功为剩余时间，解决MySQL版本解绑成功却提示失败的问题。
//2.0更新日期：2017年7月6日 10:22:09
//1、新增：心跳超时重登功能，有需要开启请在主脚本开头执行 bbyreg.变量_超时重登 = True
//2、新增：脚本版本下载更新功能。（项目管理更新：http://bbs.baibaoyun.com/thread-587-1-1.html）
//2.1更新日期：2017年7月7日 19:52:36
//1、优化心跳线程
//2.2更新日期：2017年7月14日 20:16:52
//1、修正：试用模式2无法支持问题。
//2、修正：获取公告、备注、自定义数据为空时，无准确错误描述。
//2.3更新日期：2017年7月20日 10:40:04
//1、修正：试用模式2登录，因注册码状态未登录导致无法获取时间，改为用临时卡重新登录获取时间。
//2.4更新日期：2017年10月21日 15:30:32
//1、优化“函数_执行试用登录”函数对试用模式2的识别。
//2、增加“函数_执行试用扩展登录”函数。
///////////////////////////////////////////////////////////////////
//导入专门写的通讯插件，一些必要的功能命令按键本身没有。
Import "Help.lua"
//返回错误信息
Dim 变量_错误信息 = ""
//赋值注册登录
Dim 变量_Token = ""
Dim 变量_机器码 = ""
Dim 变量_注册码 = ""
Dim 变量_项目名称 = ""
Dim 变量_解绑密码 = ""
//返回注册登录
Dim 变量_注册登录信息 = ""
Dim 变量_登录状态 = "未登录"
Dim 变量_访问令牌 = ""//用于验证注册码详细信息, 自定义数据获取,
Dim 变量_超时重登 = False
//返回注册验证
Dim 变量_激活时间 = ""
Dim 变量_到期时间 = ""
Dim 变量_登录时间 = ""
Dim 变量_验证时间 = ""
Thread.SetShareVar "剩余分钟", -1//把剩余时间存入共享变量
///////////////////////////////////////////////////////////////////
Function 函数_执行注册登录()
    函数_执行注册登录 = False
    //验证参数
    If 执行参数验证("机器码,注册码,项目名称") Then//参数无误,发送请求
        //Dim 请求 = "flag=注册码登录&机器码=" & 变量_机器码 & "&注册码=" & 变量_注册码 & "&项目名称=" & 变量_项目名称
        Dim 请求 = "flag=注册码登录" _
		& "&机器码=" & 变量_机器码 _
    	& "&注册码=" & 变量_注册码 _
    	& "&项目名称=" & 变量_项目名称
        变量_注册登录信息 = 获取通讯请求(请求)
        If 变量_注册登录信息 <> "" Then
            //返回:登陆状态|剩余时间(分钟)|令牌
            Dim arr = Split(变量_注册登录信息, "|")
            If UBound(arr) <> 2 Then
                //返回格式错误
                变量_错误信息 = "返回错误:" & 变量_注册登录信息
            Else
                If not IsNumeric(arr(1)) Then 
                    //剩余时间(分钟)数值错误
                    变量_错误信息 = "剩余时间内容错误:" & arr(1)
                ElseIf arr(2) = "" Then
                    //获取不到访问令牌
                    变量_错误信息 = "获取不到访问令牌"
                Else
                    Dim 剩余分钟 = CInt(arr(1))
                    Thread.SetShareVar "剩余分钟", 剩余分钟//把剩余时间存入共享变量
                    变量_访问令牌 = arr(2)
                    //判断是否过期
                    If 剩余分钟 > 0 Then
                        变量_登录状态 = "注册登录"
                        函数_执行注册登录 = True
                    Else//过期
                        变量_错误信息 = "注册过期,剩余分钟:" & 剩余分钟
                    End If
                End If
            End If
        End If
    End If
End Function
///////////////////////////////////////////////////////////////////
Function 函数_获取注册码验证()
    函数_获取注册码验证 = ""
    //验证参数
    If 执行参数验证("机器码,注册码,访问令牌,项目名称") Then//参数无误,发送请求
        //Dim 请求 = "flag=注册码验证&机器码=" & 变量_机器码 & "&注册码=" & 变量_注册码 & "&访问令牌=" & 变量_访问令牌 & "&项目名称=" & 变量_项目名称
        Dim 请求 = "flag=注册码验证" _
		& "&机器码=" & 变量_机器码 _
    	& "&注册码=" & 变量_注册码 _
    	& "&访问令牌=" & 变量_访问令牌 _
    	& "&项目名称=" & 变量_项目名称
        Dim 返回值 = 获取通讯请求(请求)
        If 返回值 <> "" Then
            //返回:激活时间|到期时间|登陆时间|验证时间
            //返回:2016-12-29 15:12:04|2017-02-27 14:02:04|2017-01-10 13:59:09|2017-01-10 13:59:09
            Dim arr = Split(返回值, "|")
            If UBound(arr) = 3 Then
                //返回格式正确
                变量_激活时间 = arr(0)
                变量_到期时间 = arr(1)
                变量_登录时间 = arr(2)
                变量_验证时间 = arr(3)
                函数_获取注册码验证 = "激活时间:" & 变量_激活时间 & "\n到期时间:" & 变量_到期时间 & "\n登录时间:" & 变量_登录时间 & "\n验证时间:" & 变量_验证时间
            Else
                变量_错误信息 = "返回错误:" & 返回值
            End If
        End If
    End If
End Function
///////////////////////////////////////////////////////////////////
Function 函数_执行试用登录()
    函数_执行试用登录 = False
    //验证参数
    If 执行参数验证("机器码,项目名称") Then
        //试用模式1 与 3
        //Dim 请求 = "flag=试用&机器码=" & 变量_机器码 & "&项目名称=" & 变量_项目名称
        Dim 请求 = "flag=试用" _
		& "&机器码=" & 变量_机器码 _
    	& "&项目名称=" & 变量_项目名称
        Dim 返回值 = 获取通讯请求(请求)
        If 返回值 <> "" Then
            If InStr(1, 返回值, "成功") > 0 Then
                变量_登录状态 = "试用登录"
                Thread.SetShareVar "剩余分钟", 函数_获取剩余分钟()//把剩余时间存入共享变量
                函数_执行试用登录 = True
            Else
                //试用失败
                变量_错误信息 = 返回值
            End If
            //ElseIf 变量_错误信息 = "操作失败:此试用模式不支持TryLogin函数(不支持普通试用模式),请使用试用登陆扩展模式." Then
        ElseIf InStr(1, 变量_错误信息, "此试用模式不支持TryLogin函数") > 0 Then
            //用登录拓展模式
            请求 = "flag=注册码试用扩展模式" _
			& "&机器码=" & 变量_机器码 _
    		& "&项目名称=" & 变量_项目名称
            变量_注册登录信息 = 获取通讯请求(请求)
            If 变量_注册登录信息 <> "" Then //通讯成功
                //登录状态|访问令牌|试用注册码
                //登陆成功|287449951|7B7954B7F93349DA98C8C6166284172B
                Dim arr = Split(变量_注册登录信息, "|")
                If UBound(arr) <> 2 Then
                    //返回格式错误
                    变量_错误信息 = "返回错误:" & 变量_注册登录信息
                Else
                    If arr(1) = "" Then
                        //获取不到访问令牌
                        变量_错误信息 = "返回错误:获取不到访问令牌:" & arr(1)
                    ElseIf Len(arr(2)) <> 32 Then
                        //生成试用注册码位数不对
                        变量_错误信息 = "返回错误:生成试用注册码位数不对:" & arr(2)
                    Else
                        变量_登录状态 = "注册登录"
                        变量_访问令牌 = arr(1)
                        变量_注册码 = arr(2)
                        //试用模式2，生成的注册码写入文本记录
                        File.Write "/sdcard/bbyRegCode.txt", 变量_注册码
                        //Thread.SetShareVar "剩余分钟", 函数_获取剩余分钟()//把剩余时间存入共享变量
                        函数_执行试用登录 = 函数_执行注册登录()//改为用临时卡重新登录来获取剩余分钟
                    End If
                End If
            End If
        End If
    End If
End Function
///////////////////////////////////////////////////////////////////
Function 函数_执行试用扩展登录()
    函数_执行试用扩展登录 = False
    //验证参数
    If 执行参数验证("机器码,项目名称") Then
        //试用模式1 与 3
        //Dim 请求 = "flag=注册码试用扩展模式&机器码=" & 变量_机器码 & "&项目名称=" & 变量_项目名称
        Dim 请求 = "flag=注册码试用扩展模式" _
		& "&机器码=" & 变量_机器码 _
    	& "&项目名称=" & 变量_项目名称
        变量_注册登录信息 = 获取通讯请求(请求)
        If 变量_注册登录信息 <> "" Then //通讯成功
            //登录状态|访问令牌|试用注册码
            //登陆成功|287449951|7B7954B7F93349DA98C8C6166284172B
            Dim arr = Split(变量_注册登录信息, "|")
            If UBound(arr) <> 2 Then
                //返回格式错误
                变量_错误信息 = "返回错误:" & 变量_注册登录信息
            Else
                If arr(1) = "" Then
                    //获取不到访问令牌
                    变量_错误信息 = "返回错误:获取不到访问令牌:" & arr(1)
                ElseIf Len(arr(2)) <> 32 Then
                    //生成试用注册码位数不对
                    变量_错误信息 = "返回错误:生成试用注册码位数不对:" & arr(2)
                Else
                    变量_登录状态 = "注册登录"
                    变量_访问令牌 = arr(1)
                    变量_注册码 = arr(2)
                    //试用模式2，生成的注册码写入文本记录
                    File.Write "/sdcard/bbyRegCode.txt", 变量_注册码
                    //Thread.SetShareVar "剩余分钟", 函数_获取剩余分钟()//把剩余时间存入共享变量
                    函数_执行试用扩展登录 = 函数_执行注册登录()//改为用临时卡重新登录来获取剩余分钟
                End If
            End If
        End If
    End If
End Function
///////////////////////////////////////////////////////////////////
Function 函数_执行注册解绑()
    函数_执行注册解绑 = False
    //验证参数
    If 执行参数验证("机器码,注册码,项目名称") Then
        //参数无误,发送请求
        //Dim 请求 = "flag=客户端解绑注册码&机器码=" & 变量_机器码 & "&注册码=" & 变量_注册码 & "&解绑密码=" & 变量_解绑密码 & "&项目名称=" & 变量_项目名称
        Dim 请求 = "flag=客户端解绑注册码" _
		& "&机器码=" & 变量_机器码 _
    	& "&注册码=" & 变量_注册码 _
    	& "&解绑密码=" & 变量_解绑密码 _
    	& "&项目名称=" & 变量_项目名称
        Dim 返回值 = 获取通讯请求(请求)
        If 返回值 <> "" Then
            //解绑成功,返回:剩余分钟
            If IsNumeric(返回值) Then
                函数_执行注册解绑 = True
            Else
                变量_错误信息 = "解绑失败：" & 返回值
            End If
        End If
    End If
End Function
///////////////////////////////////////////////////////////////////
Function 函数_获取项目公告()//在项目管理里可以设置给脚本获取
    If 执行参数验证("项目名称") Then
        Dim 请求 = "flag=获取项目公告&项目名称=" & 变量_项目名称
        Dim 返回值 = 获取通讯请求(请求)
        If 变量_错误信息 = "" Then
            //通讯成功，判断返回值
            If 返回值 = "" Then
                函数_获取项目公告 = "操作失败:项目公告为空"
            Else
                函数_获取项目公告 = 返回值
            End If
        Else
            函数_获取项目公告 = 变量_错误信息
        End If
    Else
        函数_获取项目公告 = 变量_错误信息
    End If
End Function
///////////////////////////////////////////////////////////////////
Function 函数_获取剩余分钟()//根据登录方式, 获取对应的剩余分钟
    函数_获取剩余分钟 = -1
    变量_错误信息 = ""
    Dim 请求, 返回值
    If 变量_登录状态 = "注册登录" Then
        //验证参数
        If 执行参数验证("机器码,注册码,访问令牌,项目名称") Then
            //请求 = "flag=查询注册码时间&机器码=" & 变量_机器码 & "&注册码=" & 变量_注册码 & "&访问令牌=" & 变量_访问令牌 & "&项目名称=" & 变量_项目名称
            请求 = "flag=查询注册码时间" _
			& "&机器码=" & 变量_机器码 _
    		& "&注册码=" & 变量_注册码 _
    		& "&访问令牌=" & 变量_访问令牌 _
    		& "&项目名称=" & 变量_项目名称
            返回值 = 获取通讯请求(请求)
            If 返回值 <> "" Then
                If IsNumeric(返回值) Then
                    函数_获取剩余分钟 = CInt(返回值)
                Else
                    变量_错误信息 = "返回错误:返回值非数字内容:" & 返回值
                End If
            End If
        End If
    ElseIf 变量_登录状态 = "试用登录" Then
        //验证参数
        If 执行参数验证("机器码,项目名称") Then
            //请求 = "flag=试用时间&机器码=" & 变量_机器码 & "&项目名称=" & 变量_项目名称
            请求 = "flag=试用时间" _
			& "&机器码=" & 变量_机器码 _
    		& "&项目名称=" & 变量_项目名称
            返回值 = 获取通讯请求(请求)
            If 返回值 <> "" Then
                If IsNumeric(返回值) Then
                    函数_获取剩余分钟 = CInt(返回值)
                Else
                    变量_错误信息 = "返回错误:返回值非数字内容:" & 返回值
                End If
            End If
        End If
    Else
        变量_错误信息 = "操作失败:尚未登录无法获取剩余分钟"
    End If
End Function
///////////////////////////////////////////////////////////////////
Function 函数_设置注册码备注(内容)
    函数_设置注册码备注 = False
    If 执行参数验证("机器码,注册码,访问令牌,项目名称") Then
        Dim 请求 = "flag=注册码设置备注" _
		& "&机器码=" & 变量_机器码 _
    	& "&注册码=" & 变量_注册码 _
    	& "&访问令牌=" & 变量_访问令牌 _
    	& "&项目名称=" & 变量_项目名称 _
    	& "&备注=" & 内容
        Dim 返回值 = 获取通讯请求(请求)
        If InStr(1, 返回值, "设置成功") > 0 Then 
            函数_设置注册码备注 = True
        Else
            变量_错误信息 = "设置失败：" & 返回值
        End If
    End If
End Function
///////////////////////////////////////////////////////////////////
Function 函数_获取注册码备注()
    If 执行参数验证("机器码,注册码,访问令牌,项目名称") Then
        Dim 请求 = "flag=注册码获取备注" _
		& "&机器码=" & 变量_机器码 _
    	& "&注册码=" & 变量_注册码 _
    	& "&访问令牌=" & 变量_访问令牌 _
    	& "&项目名称=" & 变量_项目名称
        Dim 返回值 = 获取通讯请求(请求)
        If 变量_错误信息 = "" Then
            //通讯成功，判断返回值
            If 返回值 = "" Then
                函数_获取注册码备注 = "操作失败:备注为空"
            Else
                函数_获取注册码备注 = 返回值
            End If
        Else
            函数_获取注册码备注 = 变量_错误信息
        End If
    Else
        函数_获取注册码备注 = 变量_错误信息
    End If
End Function
///////////////////////////////////////////////////////////////////
Function 函数_获取自定义数据(key值)//在"自定义数据"里自己设定一些参数值内容,给脚本去获取
    If 执行参数验证("机器码,注册码,访问令牌,项目名称") Then
        Dim 请求 = "flag=获取项目键名称值" _
		& "&机器码=" & 变量_机器码 _
		& "&项目键名称=" & key值 _
    	& "&访问令牌=" & 变量_访问令牌 _
    	& "&项目名称=" & 变量_项目名称 _
    	& "&注册码=" & 变量_注册码
        Dim 返回值 = 获取通讯请求(请求)
        If 变量_错误信息 = "" Then
            //通讯成功，判断返回值
            If 返回值 = "" Then
                函数_获取自定义数据 = "操作失败:自定义数据为空"
            Else
                函数_获取自定义数据 = 返回值
            End If
        Else
            函数_获取自定义数据 = 变量_错误信息
        End If
    Else
        函数_获取自定义数据 = 变量_错误信息
    End If
End Function
///////////////////////////////////////////////////////////////////
Function 函数_发送监控消息(规则名称, 详情)
    函数_发送监控消息 = False
    If 执行参数验证("注册码") Then
        Dim 请求 = "flag=插入监控数据" _
		& "&规则名称=" & 规则名称 _
		& "&注册码=" & 变量_注册码 _
		& "&详情=" & 详情
        Dim 返回值 = 获取通讯请求(请求)
        If 返回值 <> "" Then
            If 返回值 = "发送成功" Then
                函数_发送监控消息 = True
            Else
                变量_错误信息 = "发送监控异常:" & 返回值
            End If
        End If
    End If
End Function
///////////////////////////////////////////////////////////////////
Function 函数_执行以卡充卡(新卡, 老卡)
    函数_执行以卡充卡 = False
    变量_错误信息 = ""
    If 新卡 = "" Then 
        变量_错误信息 = "参数错误:新卡注册码不可为空"
    ElseIf Len(新卡) <> 32 Then
        变量_错误信息 = "参数错误:新卡注册码位数非32位,请确认注册码完整性"
    ElseIf 老卡 = "" Then
        变量_错误信息 = "参数错误:老卡注册码不可为空"
    ElseIf Len(老卡) <> 32 Then
        变量_错误信息 = "参数错误:老卡注册码位数非32位,请确认注册码完整性"
    Else
        Dim 请求 = "flag=以卡充卡" _
		& "&新卡=" & 新卡 _
        & "&老卡=" & 老卡
        Dim 返回值 = 获取通讯请求(请求)
        If 返回值 <> "" Then
            If 返回值 = "OK" Then 
                函数_执行以卡充卡 = True
            Else
                变量_错误信息 = "充值异常:" & 返回值
            End If
        End If
    End If
End Function
///////////////////////////////////////////////////////////////////
Function 函数_执行注册码退出()
    函数_执行注册码退出 = False
    If 执行参数验证("注册码,访问令牌") Then
        Dim 请求 = "flag=注册码退出" _
    	& "&注册码=" & 变量_注册码 _
    	& "&访问令牌=" & 变量_访问令牌
        Dim 返回值 = 获取通讯请求(请求)
        If 返回值 <> "" Then
            If 返回值 = "操作成功" Then 
                函数_执行注册码退出 = True
            Else
                变量_错误信息 = "退出异常:" & 返回值
            End If
        End If
    End If
End Function
///////////////////////////////////////////////////////////////////
//以下是给内部插件调用模块, 外部调用使用无需理会
///////////////////////////////////////////////////////////////////
Function 执行参数验证(验证参数)
    执行参数验证 = False
    变量_错误信息 = ""
    //token与项目名称,是必填参数
    If 验证参数 = "" Then
        变量_错误信息 = "参数错误:验证参数不可为空,请确认bbyreg命令库源码的完整性,或联系作者"
    ElseIf 变量_Token = "" Then
        变量_错误信息 = "参数错误:Token不可为空,需要对 bbyreg.变量_Token = 赋值"
    ElseIf Len(变量_Token) <> 32 Then
        变量_错误信息 = "参数错误:Token位数非32位,请重新核对赋值信息"
    ElseIf InStr(1, 验证参数, "项目名称") > 0 and 变量_项目名称 = "" Then
        变量_错误信息 = "参数错误:项目名称不可为空,需要对 bbyreg.变量_项目名称 = 赋值"
    ElseIf InStr(1, 验证参数, "机器码") > 0 and 变量_机器码 = "" Then
        变量_错误信息 = "参数错误:机器码不可为空,需要对 bbyreg.变量_机器码 = 赋值"
    ElseIf InStr(1, 验证参数, "注册码") > 0 and 变量_注册码 = "" Then
        变量_错误信息 = "参数错误:注册码不可为空,需要对 bbyreg.变量_注册码 = 赋值"
    ElseIf InStr(1, 验证参数, "注册码") > 0 and Len(变量_注册码) <> 32 Then
        变量_注册码 = Trim(Replace(变量_注册码, Chr(10), ""))
        Dim n = Len(变量_注册码)
        If n = 32 Then
            执行参数验证 = True//去除回车符，验证成功
            Exit Function
        Else
            Dim arr = Array("xiaoshika", "tianka", "zhouka", "yueka", "jika", "bannianka", "nianka", "yongjiuka")
            For Each str In arr
                If InStr(1, 变量_注册码, str) = 1 and Len(str) + 32 = n Then 
                    //符合前缀格式，验证成功
                    执行参数验证 = True
                    Exit Function
                End If
            Next
        End If
        变量_错误信息 = "参数错误:注册码位数非32位,请重新核对赋值信息"
    ElseIf InStr(1, 验证参数, "解绑密码") > 0 and 变量_解绑密码 = "" Then
        变量_错误信息 = "参数错误:解绑密码不可为空,需要对 bbyreg.变量_解绑密码 = 赋值"
    ElseIf InStr(1, 验证参数, "访问令牌") > 0 and 变量_访问令牌 = "" Then
        变量_错误信息 = "参数错误:访问令牌不可为空,请确认注册登录成功后再调用通讯请求"
    Else//参数无误
        执行参数验证 = True
    End If
End Function
///////////////////////////////////////////////////////////////////
Function 获取通讯请求(请求)
    获取通讯请求 = ""
    变量_错误信息 = ""
    //验证参数
    If 变量_Token = "" Then
        变量_错误信息 = "参数错误:Token不可为空,请确认注册登录成功后再调用通讯请求"
    Else
        Dim 返回值 = URL.Get("http://get.baibaoyun.com/api/" & 变量_Token & "?" & 获取中文转码(请求))
        //错误格式: 操作失败:xxxx
        //操作失败:注册码已经解绑了，需要重新登录.
        If InStr(1, 返回值, "操作失败") = 1 Then
            变量_错误信息 = 返回值
        Else
            获取通讯请求 = 返回值
        End If
    End If
End Function
///////////////////////////////////////////////////////////////////
Function 获取中文转码(请求)
    //键名=键值&键名=键值&键名=键值&键名=键值
    //针对里面的中文进行转码，跳过 & 与 = 符号
    Dim arr = Split(请求, "&"), arr1
    For Each i , temp In arr
        arr1 = Split(temp, "=")
        arr1(0) = Help.encodeURI(arr1(0))
        arr1(1) = Help.encodeURI(arr1(1))
        arr(i - 1) = Join(arr1, "=")
    Next
    获取中文转码 = Join(arr, "&")
End Function
///////////////////////////////////////////////////////////////////
Sub 函数_执行心跳检测(间隔)
    //主线脚本以子线程方式启动一个Sub，由这个Sub里调用 函数_执行心跳检测。
    //主线脚本以子线程方式启动一个Sub，由这个Sub里调用 函数_执行心跳检测。
    //主线脚本以子线程方式启动一个Sub，由这个Sub里调用 函数_执行心跳检测，重要事情说三遍。
    //必须开启一个单独线程,来监控是否到期,为了不影响主线循环,所以单独分出来
    //由 bbyreg.函数_获取共享变量剩余分钟() 变量值来给主线判定是否到期
    //约束间隔范围，不可低于10分钟，不可高于30分钟。
    If CInt(间隔) > 1800 Then
        间隔 = 1800
    ElseIf CInt(间隔) < 600 Then
        间隔 = 600
    End If
    Dim 局部_插件版本 = Help.Ver()
    Dim 局部_允许失败次数 = 30
    Dim 局部_失败重试间隔 = 60
    Dim 局部_等待时间, 局部_剩余分钟, 局部_首次通讯 = True
    Do
        局部_失败重试间隔 = 间隔 \ 2
        //建议间隔10-30分钟，访问一次服务器，原因例子中已写明，没看的请返回看
        If 局部_首次通讯 Then
            局部_等待时间 = Time() + 180//首次3分钟间隔，以此检测一次是否存在重复登录行为
        Else
            局部_等待时间 = Time() + 间隔//单位：秒
        End If
        Do
            Delay 3000
        Loop Until Time() > 局部_等待时间
        //与服务器通讯，获取剩余时间或状态
        For i = 0 To 局部_允许失败次数
            局部_剩余分钟 = 函数_获取剩余分钟()
            //操作失败:注册码已经解绑了，需要重新登录.
            //操作失败:注册码已经下线.
            If 局部_剩余分钟 <> -1 and 变量_错误信息 = "" Then 
                //通讯正常
                Thread.SetShareVar "剩余分钟", 局部_剩余分钟//把剩余时间存入共享变量
                If 局部_剩余分钟 <= 0 Then
                    Thread.SetShareVar "错误信息", "注册码已到期，剩余分钟：" & 局部_剩余分钟//把 变量_错误信息 存入共享变量
                    Exit Sub//过期离开Sub，结束心跳
                Else
                    局部_首次通讯 = False//通讯成功，则恢复设定间隔
                    Exit For//否则离开通讯循环，等待下次通讯
                End If
            ElseIf 变量_超时重登 and 变量_错误信息 = "操作失败:注册码已经下线." Then
                TracePrint "登录超时，重新登录"
                If 函数_执行注册登录() Then
                    //注册成功,时间不足会返回失败,失败信息在 变量_错误信息 里
                    //返回:登陆状态|剩余时间(分钟)|访问令牌
                    TracePrint "注册返回：" & 变量_注册登录信息
                    Exit For//成功了，离开等待下次通讯
                Else
                    //注册失败
                    TracePrint "注册失败"
                    TracePrint 变量_错误信息
                End If
            ElseIf InStr(1, 变量_错误信息, "操作失败:") > 0 Then
                //登录失效，停止
                Thread.SetShareVar "剩余分钟", -1//把剩余时间存入共享变量
                Thread.SetShareVar "错误信息", 变量_错误信息//把 变量_错误信息 存入共享变量
                Exit Sub//登录状态异常，被顶号，登录失效，停止离开
            End If
            //通讯异常，服务器繁忙，并发数占满导致请求超时：等待短暂时间后重试
            TracePrint "通讯异常"
            TracePrint 变量_错误信息
            //次数超出，离开尝试通讯
            If i = 局部_允许失败次数 Then
                变量_错误信息 = "通讯失败次数超出"
                Thread.SetShareVar "剩余分钟", -1//把剩余时间存入共享变量
                Thread.SetShareVar "错误信息", 变量_错误信息//把 变量_错误信息 存入共享变量
                Exit Sub//尝试次数超出，离开Sub，结束心跳
            ElseIf Left(局部_插件版本, 2) = "2." and Help.GetIP() = null and i > 3 Then
                //判断到断网，次数大于3，则停止
                变量_错误信息 = "检测到断网"
                Thread.SetShareVar "剩余分钟", -1//把剩余时间存入共享变量
                Thread.SetShareVar "错误信息", 变量_错误信息//把 变量_错误信息 存入共享变量
                Exit Sub//检测到断网，离开Sub，结束心跳
            End If
            //通讯失败，等待，再尝试
            For i1 = 0 To 局部_失败重试间隔
                Delay 1000
            Next
            局部_失败重试间隔 = 局部_失败重试间隔 \ 2
            If 局部_失败重试间隔 < 60 Then 局部_失败重试间隔 = 60//间隔不可小于60秒
        Next
    Loop
End Sub
///////////////////////////////////////////////////////////////////
Function 函数_获取心跳剩余分钟()
    函数_获取心跳剩余分钟 = CInt(Thread.GetShareVar("剩余分钟"))
    变量_错误信息 = Thread.GetShareVar("错误信息")
End Function
///////////////////////////////////////////////////////////////////
Function 函数_执行脚本更新(版本)
    函数_执行脚本更新 = False
    //验证插件版本是否支持
    If Left(Help.Ver(), 2) <> "2." Then Exit Function
    //验证版本格式0.0.0.0
    Dim arr = Split(版本, ".")
    If UBound(arr) <> 3 Then 
        变量_错误信息 = "版本号格式错误：" & 版本
        Exit Function
    ElseIf not IsNumeric(Replace(版本, ".", "")) Then
        变量_错误信息 = "版本号格式错误：" & 版本
        Exit Function
    End If
    If 执行参数验证("项目名称") Then
        //prog=项目名称&ver=版本
        Dim 请求 = "prog=" & 变量_项目名称 & "&ver=" & 版本
        Dim 返回值 = 获取通讯请求(请求)
        //验证版本信息
        If InStr(1, 返回值, "{") <> 1 or InStr(2, 返回值, "}") <> Len(返回值) Then
            变量_错误信息 = "验证版本失败：" & 返回值
            Exit Function
        ElseIf 返回值 = "{}" Then
            //无更新
            函数_执行脚本更新 = True
            Exit Function
        End If
        arr = Encode.JsonToTable(返回值)
        //path = 项目名称/文件名称.后缀
        arr = Split(arr["path"], "/")
        Dim 项目路径 = arr(0)
        Dim 文件名称 = arr(1)
        请求 = "access_token=" & 变量_Token & "&filename=" & 文件名称 & "&path=" & 项目路径
        Dim 下载地址 = "http://apicloudupload.baibaoyun.com/cloudupload.php?method=download&" & 获取中文转码(请求)
        TracePrint 下载地址
        Dim 保存路径 = "/sdcard/" & 文件名称
        //下载版本
        Help.DownLoadFile 下载地址, 保存路径
        If Dir.Exist("/sdcard/" & 文件名称) <> 1 Then 
            变量_错误信息 = "版本文件下载失败：" & 下载地址
            Exit Function
        End If
        TracePrint "下载成功"
        //安装应用
        Help.InstallApp 保存路径
        函数_执行脚本更新 = True
    End If
End Function
///////////////////////////////////////////////////////////////////